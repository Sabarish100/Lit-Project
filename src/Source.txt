import { LitElement, html, css } from "lit";
import { customElement, property, state } from "lit/decorators.js";
 
// Define User Type
interface User {
  firstName: string;
  lastName: string;
  username: string;
  email: string;
  phone: string;
  role: string;
  image?: string;
}
 
@customElement("user-management")
export class UserManagement extends LitElement {
  @property({ type: Array }) users: User[] = [];
  @state() newUser: User = {
    firstName: "",
    lastName: "",
    username: "",
    email: "",
    phone: "",
    role: "",
    image: "https://via.placeholder.com/40",
  };
  @state() showPopup: boolean = false;
 
  @state() currentPage: number = 1;
  @state() usersPerPage: number = 5;
 
  static styles = css`
    :host {
      align-items: center;
      font-family: Arial, sans-serif;
      height: 100%;
      background-color: #2596be;
    }
 
    .container {
      width: 80%;
      margin: auto;
      text-align: center;
      position: relative;
    }
 
    .top-bar {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
    }
 
    .add-user-btn {
      background: #28a745;
      color: white;
      padding: 8px 12px;
      border: none;
      cursor: pointer;
      border-radius: 5px;
    }
 
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
      font-size: 14px;
      box-shadow: 0px 0px 7px 9px #fefefe;
    }
 
    th, td {
      border: 1px solid #ddd;
      padding: 8px;
    }
 
    th {
      background: #f4f4f4;
    }
 
    img {
      width: 40px;
      height: 40px;
      border-radius: 50%;
    }
 
    .pagination {
      margin-top: 10px;
    }
 
    .page-btn {
      background: #2196f3;
      color: white;
      border: none;
      padding: 6px 10px;
      cursor: pointer;
      border-radius: 4px;
      margin: 0 5px;
    }
 
    .disabled {
      background: #ccc;
      cursor: not-allowed;
    }
 
    .popup {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: white;
      padding: 20px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
      border-radius: 5px;
      z-index: 1000;
    }
 
    .overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      z-index: 999;
    }
 
    .popup input {
      display: block;
      width: 100%;
      margin: 5px 0;
      padding: 6px;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
 
    .popup-buttons {
      display: flex;
      justify-content: space-between;
      margin-top: 10px;
    }
  `;
 
  connectedCallback() {
    super.connectedCallback();
    this.fetchUsers();
  }
 
  async fetchUsers(): Promise<void> {
    try {
      const response = await fetch("https://dummyjson.com/users");
      const data = await response.json();
 
      this.users = data.users.map(
        (user: any): User => ({
          firstName: user.firstName,
          lastName: user.lastName,
          username: user.username,
          email: user.email,
          phone: user.phone,
          role: user.role || "User",
          image: user.image || "https://via.placeholder.com/40",
        })
      );
    } catch (error) {
      console.error("Error fetching users:", error);
    }
  }
 
  private openPopup() {
    this.showPopup = true;
  }
 
  private closePopup() {
    this.showPopup = false;
  }
 
  private handleInput(event: InputEvent, field: keyof User) {
    const target = event.target as HTMLInputElement;
    this.newUser = { ...this.newUser, [field]: target.value };
  }
 
  private addUser() {
    if (!this.newUser.firstName || !this.newUser.lastName || !this.newUser.username || !this.newUser.email || !this.newUser.phone || !this.newUser.role) {
      alert("Please fill all fields.");
      return;
    }
 
    this.users = [...this.users, { ...this.newUser }];
    this.newUser = { firstName: "", lastName: "", username: "", email: "", phone: "", role: "", image: "https://via.placeholder.com/40" };
    this.closePopup();
  }
 
  private nextPage() {
    if (this.currentPage < Math.ceil(this.users.length / this.usersPerPage)) {
      this.currentPage++;
    }
  }
 
  private prevPage() {
    if (this.currentPage > 1) {
      this.currentPage--;
    }
  }
 
  render() {
    // Pagination logic
    const startIndex = (this.currentPage - 1) * this.usersPerPage;
    const endIndex = startIndex + this.usersPerPage;
    const paginatedUsers = this.users.slice(startIndex, endIndex);
 
    return html`
      <div class="container">
        <div class="top-bar">
          <h2>User Management</h2>
          <button class="add-user-btn" @click="${this.openPopup}">Add User</button>
        </div>
 
        <table>
          <thead>
            <tr>
              <th>Image</th>
              <th>First Name</th>
              <th>Last Name</th>
              <th>Username</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Role</th>
            </tr>
          </thead>
          <tbody>
            ${paginatedUsers.map(user => html`
              <tr>
                <td><img src="${user.image}" /></td>
                <td>${user.firstName}</td>
                <td>${user.lastName}</td>
                <td>${user.username}</td>
                <td>${user.email}</td>
                <td>${user.phone}</td>
                <td>${user.role}</td>
              </tr>
            `)}
          </tbody>
        </table>
 
        <!-- Pagination Controls -->
        <div class="pagination">
          <button class="page-btn ${this.currentPage === 1 ? 'disabled' : ''}"
                  ?disabled="${this.currentPage === 1}"
                  @click="${this.prevPage}">Previous</button>
          <span> Page ${this.currentPage} of ${Math.ceil(this.users.length / this.usersPerPage)} </span>
          <button class="page-btn ${this.currentPage >= Math.ceil(this.users.length / this.usersPerPage) ? 'disabled' : ''}"
                  ?disabled="${this.currentPage >= Math.ceil(this.users.length / this.usersPerPage)}"
                  @click="${this.nextPage}">Next</button>
        </div>
 
        ${this.showPopup ? html`
          <div class="overlay" @click="${this.closePopup}"></div>
          <div class="popup">
            <h3>Add New User</h3>
            <input type="text" placeholder="First Name" @input="${(e: InputEvent) => this.handleInput(e, 'firstName')}" />
            <input type="text" placeholder="Last Name" @input="${(e: InputEvent) => this.handleInput(e, 'lastName')}" />
            <input type="text" placeholder="Username" @input="${(e: InputEvent) => this.handleInput(e, 'username')}" />
            <input type="email" placeholder="Email" @input="${(e: InputEvent) => this.handleInput(e, 'email')}" />
            <input type="text" placeholder="Phone" @input="${(e: InputEvent) => this.handleInput(e, 'phone')}" />
            <input type="text" placeholder="Role" @input="${(e: InputEvent) => this.handleInput(e, 'role')}" />
            <div class="popup-buttons">
              <button class="add-user-btn" @click="${this.addUser}">Save</button>
              <button @click="${this.closePopup}">Cancel</button>
            </div>
          </div>
        ` : ""}
      </div>
    `;
  }
}